#!/bin/bash

# Hardcoded defaults
#	Immutable
main_directory="$HOME/.playlister/"
config_file="${main_directory}playlister.conf"
helpfile="${main_directory}playlister.help"
playlist_ext=".plst"
mp3_ext=".mp3"
backup_ext=".bak"
tmp_file="/tmp/playlister-1234321.tmp"
#	Mutable
playlist_directory="${main_directory}playlists/"
mp3_directory="${main_directory}mp3s/"

declare -A configs=( 
	["Main directory"]="$main_directory" \
	["Configurations"]="$config_file" \
	["Help file"]="$helpfile" \
	["Playlists dir"]="$playlist_directory" \
	["Music directory"]="$mp3_directory" \
)

declare -a configs_mutable=(
	"mp3_directory" \
	"playlist_directory"
)

function main () {
	if [[ "$#" -eq 0 ]]; then
		output-failure "invalid argument count (must be > 0)"
		exit 1
	fi
	while [[ "$#" -gt 0 ]]; do
		case $1 in 
			config)
				shift
				config "$@"
				exit 0
				;;
			show)
				shift
				read-config-if-exists
				show "$@"
				exit 1
				;;
			*)
				output-failure "unrecognised option:\"$1\""
				shift
				exit 1
				;;
		esac
	done
}

function output-success () {
	local output="$1"
	local white="\e[1;37m"
	local green="\e[1;32m"
	>&2 echo -e "${white}(${green}+${white}) ${output}."
}

function output-failure () {
	local output="$1"
	local white="\e[1;37m"
	local red="\e[1;31m"
	>&2 echo -e "${white}(${red}-${white}) ${output}!"
}

function output-info () {
	local output="$1"
	local white="\e[1;37m"
	local yellow="\e[1;33m"
	>&2 echo -e "${white}(${yellow}*${white}) ${output}."
}

function show () {
	if [[ $# -eq 0 ]]; then
		output-failure "invalid show argument count( must be >0)"
		exit 1
	fi
	echo "these are your show arguments arguments: $@"
}

function config () {
	if [[ "$#" -eq 0 ]]; then
		output-failure "invalid config argument count (must be >0)"
		exit 1
	fi
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			configure)
				config-configure
				exit 0
				;;
			list)
				read-config-if-exists
				config-list
				exit 0
				;;
			get)
				shift
				read-config-if-exists
				config-get "$@"
				exit 0
				;;
			set)	
				shift
				read-config-if-exists
				config-set "$@"
				exit 0
				;;
			*)
				output-failure "unrecognised config option:\"$1\""
				exit 1
				;;
		esac
	done
}
function config-configure () {
	if ! create-directory "$main_directory" ; then
		exit 1
	fi
	
	if ! setup-file "$helpfile" "currentdir"; then
		exit 1
	fi
	
	if ! setup-file "$config_file" "backup" "makenew"; then
		exit 1
	fi
	
	if read-config ; then
		output-success "$(basename "$config_file") read"
	else
		output-failure "$(basename "$config_file") failed to read"
		exit 1
	fi
	
	if ! create-directory "$mp3_directory"; then
		exit 1
	fi

	if ! create-directory "$playlist_directory"; then
		exit 1
	fi
}

function config-list () {

	for configuration in "${!configs[@]}"; do
		# i do not need to check for validity of $configuration here
		# for $configuration is fetched directly from $configs
		if ! get-config "$configuration"; then
			output-failure "$configuration failed to list"
			exit 1
		fi
	done
}

function config-get () {
	if [[ $# -ne 1 ]]; then
		output-failure "invalid config get argument count(must be ==1)"
		exit 1
	fi
	local argument="$1"
	if ! is-valid-config "$argument" ; then
		output-failure "not a valid configuration: \"$argument\""
		return 1
	fi
	get-config "$argument"
}

function config-set () {
	if [[ $# -ne 2 ]]; then
		output-failure "invalid config set argument count(must be ==2)"
		exit 1
	fi
	
	local config_file_name="$( basename "$config_file" )"
	
	if ! [[ -w "$config_file" ]]; then
		output-failure "$config_file_name is not writable"
		exit 1
	fi
	
	> "$tmp_file"
	if ! [[ $? -eq 0 ]]; then
		output-failure "failed to create a file in /tmp"
		exit 1
	fi
	
	local argument="$1"
	if ! is-valid-config-mutable "$argument"; then
		output-failure "not a valid mutable configuration:\"$argument\""
		exit 1
	fi
	
	if ! change-configs-to-tmp "$@"; then
		output-failure "failed to change configs"
		exit 1
	fi
	
	cp "$tmp_file" "$config_file"
	if ! [[ $? -eq 0 ]]; then
		output-file "failed to overwrite $config_file_name with tmp file"
		exit 1
	fi
}

function create-directory () {
	local directory="$1"
	local directoryname="$(basename "$1")"
	if [[ -d "$directory" ]]; then
		output-info "$directoryname exists"
	else
		mkdir $directory
		if [[ $? -ne 0 ]]; then
			output-failure "$directoryname failed to create"
			return 1
		else
			output-success "$directoryname created"
		fi
		
	fi
	return 0
}

function setup-file () {
	local filepath="$1"
	local filename="$( basename "$filepath" )"
	local backup="no"
	local currentdir="no"
	local makenew="no"
	shift
	while [[ "$#" -ne 0 ]]; do
		case $1 in 
			"backup")
				backup="yes"
				shift
				;;
			"currentdir")
				currentdir="yes"
				shift
				;;
			"makenew")
				makenew="yes"
				shift
				;;
			*)
				output-failure "unrecognised setup-file option:\"$1\""
				return 1
				;;
		esac
	done
	
	if [[ -a "$filepath" ]]; then
		output-info "$filename exists"
		return 0
	fi
	output-info "$filename does not exist"

	if [[ "$backup" == "yes" ]]; then
		local filepathbak="${filepath}${backup_ext}"
		if [[ -a "$filepathbak" ]]; then
			cp "$filepathbak" "$filepath"
			if [[ $? -eq 0 ]]; then
				output-success "$filename created from backup"
				return 0
			else
				output-failure "$filename failed to create from backup"
			fi
		else
			output-info "$filename has no backup"
		fi
	fi

	if [[ "$currentdir" == "yes" ]]; then
		if [[ -a  "$filename" ]]; then
			mv "$filename" "$filepath"
			if [[ $? -eq 0 ]]; then
				output-success "$filename fetched from current directory"
				return 0
			else
				output-failure "$filename failed to fetch from current directory"
			fi
		else
			output-info "$filename not found in current directory"
		fi
	fi

	if [[ "$makenew" == "yes" ]]; then
		touch "$filepath"
		if [[ $? -eq 0 ]]; then
			output-success "$filename created"
			return 0
		fi
		output-failure "$filename failed to create"
	fi
	
	output-failure "$filename setup failed"
	return 1
}

function read-config () {
	while read line ; do
		local argument="$(echo "$line" | cut -d "=" -f 1)"
		case "$argument" in
			"mp3_directory")
				local value="$(echo "$line" | cut -d "=" -f 2)"
				mp3_directory="$value"
				configs["Music directory"]="$value"
				;;
			"playlist_directory")
				local value="$(echo "$line" | cut -d "=" -f 2)"
				playlist_directory="$value"
				configs["Playlist dir"]="$value"
				;;
			*)
				output-failure "not valid user config: \"$argument\""
				return 1
				;;
		esac
	done < "$config_file"
}

function read-config-if-exists () {
	
	local config_file_name="$(basename "$config_file")"
	if ! [[ -a "$config_file" ]]; then
		output-failure "$config_file_name does not exist"
		exit 1
	fi

	if ! read-config; then
		output-failure "$config_file_name failed to read"
		exit 1
	fi
}

function is-valid-config (){
	local argument="$1"
	local configuration
	for configuration in "${!configs[@]}"; do
		if [[ "$configuration" == "$argument" ]]; then
			return 0
		fi
	done
	return 1
}

function change-configs-to-tmp () {
	local config="$1"
	local value="$2"
	local found="no"
	local line
	while read line; do
		if [[ "$(echo "$line" | cut -d "=" -f 1)" == "$config" ]]; then
			echo "${config}=${value}" >> "$tmp_file"
			found="yes"
		else
			echo "$line" >> "$tmp_file"
		fi
	done < "$config_file"
	if [[ "$found" == "no" ]]; then
		echo "${config}=${value}" >> "$tmp_file"
	fi
}

function is-valid-config-mutable () {
	local argument="$1"
	local configuration
	for configuration in "${configs_mutable[@]}"; do
		if [[ "$argument" == "$configuration" ]]; then
			return 0
		fi
	done
	return 1
	
}

function get-config () {
    local argument="$1"
    output-info "	$argument	-> 	${configs[$argument]} "
}

main "$@"
