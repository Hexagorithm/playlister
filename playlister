#!/bin/bash

# Hardcoded defaults
#	Immutable
main_directory="$HOME/.playlister/"
config_file="${main_directory}playlister.conf"
database="${main_directory}playlister.db"
helpfile="${main_directory}playlister.help"
playlist_ext=".plst"
mp3_ext=".mp3"
backup_ext=".bak"
#	Mutable
playlist_directory="${main_directory}playlists/"
mp3_directory="${main_directory}mp3s/"

function main () {
	if [[ "$#" -eq 0 ]]; then
		user-output "invalid argument count (must be > 0)!"
		exit 1
	fi
	while [[ "$#" -gt 0 ]]; do
		case $1 in 
			config)
				shift
				config "$@"
				exit 1
				;;
			*)
				user-output "unrecognised option!"
				shift
				exit 1
				;;
		esac
	done
}

function user-output () {
	local output="$1"
	>&2 echo "$0: $1"
}

function config () {
	if [[ "$#" -eq 0 ]]; then
		user-output "invalid config argument count (must be >0)!"
		exit 1
	fi
	while [[ "$#" -gt 0 ]]; do
		case $1 in
			configure)
				config-configure
				exit 1
				;;
			*)
				user-output "unrecognised config option:\"$1\"!"
				exit 1
		esac
	done
}
function config-configure () {
	if ! create-directory "$main_directory" ; then
		exit 1
	fi
	
	if ! setup-file "$helpfile" "currentdir"; then
		exit 1
	fi
	
	if ! setup-file "$config_file" "backup" "makenew"; then
		exit 1
	else
		if read-config ; then
			user-output "$(basename "$config_file") read."
		else
			user-output "$(basename "$config_file") failed to read!"
			exit 1
		fi
	fi
	
	if ! setup-file "$database" "backup" "makenew"; then
		exit 1
	fi

	if ! create-directory "$mp3_directory"; then
		exit 1
	fi

	if ! create-directory "$playlist_directory"; then
		exit 1
	fi
}

function create-directory () {
	local directory="$1"
	local directoryname="$(basename "$1")"
	if [[ -d "$directory" ]]; then
		user-output "$directoryname exists."
	else
		mkdir $directory
		if [[ $? -ne 0 ]]; then
			user-output "$directoryname failed to create!"
			return 1
		else
			user-output "$directoryname created."
		fi
		
	fi
	return 0
}

function setup-file () {
	local filepath="$1"
	local filename="$( basename "$filepath" )"
	local backup="no"
	local currentdir="no"
	local makenew="no"
	shift
	while [[ "$#" -ne 0 ]]; do
		case $1 in 
			"backup")
				backup="yes"
				shift
				;;
			"currentdir")
				currentdir="yes"
				shift
				;;
			"makenew")
				makenew="yes"
				shift
				;;
			*)
				user-output "unrecognised setup-file option:\"$1\"!"
				return 1
				;;
		esac
	done
	
	if [[ -a "$filepath" ]]; then
		user-output "$filename exists."
		return 0
	fi
	user-output "$filename does not exist!"

	if [[ "$backup" == "yes" ]]; then
		local filepathbak="${filepath}${backup_ext}"
		if [[ -a "$filepathbak" ]]; then
			cp "$filepathbak" "$filepath"
			if [[ $? -eq 0 ]]; then
				user-output "$filename created from backup."
				return 0
			else
				user-output "$filename failed to create from backup!"
			fi
		else
			user-output "$filename has no backup!"
		fi
	fi

	if [[ "$currentdir" == "yes" ]]; then
		if [[ -a  "$filename" ]]; then
			mv "$filename" "$filepath"
			if [[ $? -eq 0 ]]; then
				user-output "$filename fetched from current directory."
				return 0
			else
				user-output "$filename failed to fetch from current directory!"
			fi
		else
			user-output "$filename not found in current directory!"
		fi
	fi

	if [[ "$makenew" == "yes" ]]; then
		touch "$filepath"
		if [[ $? -eq 0 ]]; then
			user-output "$filename created."
			return 0
		fi
		user-output "$filename failed to create!"
	fi
	
	user-output "$filename setup failed!"
	return 1
}

function read-config () {
	while read line ; do
		local argument="$(echo "$line" | cut -d "=" -f 1)"
		case "$argument" in
			"mp3_directory")
				local value="$(echo "$line" | cut -d "=" -f 2)"
				mp3_directory="$value"
				;;
			"playlist_directory")
				local value="$(echo "$line" | cut -d "=" -f 2)"
				playlist_directory="$value"
				;;
			*)
				user-output "\"$argument\" is not a valid user config."
				return 1
				;;
		esac
	done < "$config_file"
}

main "$@"
